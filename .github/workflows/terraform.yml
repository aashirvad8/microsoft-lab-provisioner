name: Terraform Deploy

on:
  push:
    branches:
      - main

# üß† Prevent multiple concurrent runs that could lock the same state file
concurrency:
  group: terraform-deploy-main
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.5

    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: terraform init -input=false

    # ‚úÖ Auto-import RG if it already exists
    - name: Import existing Resource Group (if it exists)
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: |
        RG_NAME="azure-lab-rg"
        RG_ID="/subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${RG_NAME}"

        echo "üîç Checking if resource group $RG_NAME exists..."
        if az group exists --name "$RG_NAME"; then
          echo "‚úÖ Resource group $RG_NAME already exists ‚Äî importing into Terraform state."
          terraform import azurerm_resource_group.lab_rg "$RG_ID" || true
        else
          echo "‚ÑπÔ∏è Resource group $RG_NAME does not exist ‚Äî Terraform will create it."
        fi

    # üßπ Auto-cleanup stale lock if previous run crashed
    - name: Cleanup Terraform lock (if any)
      continue-on-error: true
      run: |
        echo "üîê Checking for existing Terraform lock..."
        LOCK_ID=$(terraform state lock-info 2>/dev/null | grep "ID:" | awk '{print $2}') || true
        if [ -n "$LOCK_ID" ]; then
          echo "‚ö†Ô∏è Found lock ID: $LOCK_ID. Forcing unlock..."
          terraform force-unlock -force "$LOCK_ID" || true
        else
          echo "‚úÖ No Terraform lock found."
        fi

    - name: Terraform Plan
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      run: terraform apply -auto-approve -input=false
